}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
source('~/DataVisualization/DrCannata/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/Advanced R_ETL.R', echo=TRUE)
setwd("~/Fred/DataVisualization/RWorkshop/15 Reformatting Data")
# file_path <- "Sample - Superstore - English (Extract).csv"
# measures <- c("Customer_ID", "Discount", "Number_of_Records", "Order_ID", "Order_Quantity", "Product_Base_Margin", "Profit", "Sales", "Shipping_Cost", "Unit_Price" )
# file_path <- "Sample - Superstore Subset (Excel).csv"
# measures <- c("Row_ID", "Discount", "Unit_Price", "Shipping_Cost", "Customer_ID", "Product_Base_Margin", "Postal_Code", "Profit", "Quantity_ordered_new", "Sales", "Order_ID")
#file_path <- "Advanced Crosstabs - Superstore Subset (Excel).csv"
#measures <- c("Customer_ID", "Order_ID", "Postal_Code", "Row_ID", "Number_of_Records", "Order_Quantity", "Product_Base_Margin", "Profit", "Sales", "Shipping_Cost", "Unit_Price", "Discount", "Gross_Profit_Ratio")
file_path <- "April16AdvTblCalc.csv"
measures <- c("Customer_ID", "Order_ID", "Postal_Code", "Row_ID", "Number_of_Records", "Order_Quantity", "Product_Base_Margin", "Profit", "Sales", "Shipping_Cost", "Unit_Price", "Discount", "Gross_Profit_Ratio" )
# Take a look at read.table also with sep=",", header=TRUE, quote="", na.strings=?
# Also, xlsx package - read.xlsx("file", sheetIndex=1). Also write.xlsx and XLConnect and XLConnect vignette package.
# Read XML XML package:xmlTreeParse - rootNode <- xmlRoot(doc); xmlNames(rootNode); rootNode[[1]]; rootNode[[1][1]]; xmlSApply(rootNode, ?); XPath - see www.stat.berkeley.edu/~statcur/Workshop2/Presentations/XML.pdf. Also htmlTreeParse(URL, useInternal=TRUE); See the tutorials for teh XML Package
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
# str(df) # Uncomment this to get column types to use for getting the list of measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
sql <- paste(sql, ");")
cat(sql)
setwd("~/Fred/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/CSVs")
file_path <- "April16AdvTblCalc.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Customer_ID", "Order_ID", "Postal_Code", "Row_ID", "Discount", "Gross_Profit_Ratio" , "Number_of_Records", "Order_Quantity", "Product_Base_Margin", "Profit", "Sales", "Shipping_Cost", "Unit_Price")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
tbl_df(diamonds)
require(tidyr)
require(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
diamonds %>% select(cut, clarity) %>% tbl_df
diamonds %>% select(., cut, clarity) %>% tbl_df
diamonds %>% select(color:price) %>% tbl_df
diamonds %>% select(-cut, -clarity) %>% tbl_df
x <- diamonds %>% select(cut, clarity) %>% tbl_df
x <- diamonds %>% select(cut, clarity) %>% tbl_df
x
pmin(c(1:5), (5:1)) # Pairwise min
(5:1)
(1:5)
diamonds %>% mutate(minxy = pmin(x,y)) %>% tbl_df
require(tidyr)
require(dplyr)
require(ggplot2)
diamonds %>% mutate(minxy = pmin(x,y)) %>% tbl_df
c(1,1,2,0,4,3,5) %>% cummin()
diamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_df
diamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_df View
diamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_dfView
diamonds %>% mutate(cummin_x = cummin(x)) %>% View
diamonds %>% mutate(cumsum_x = cumsum(x)) %>% tbl_df
c(1,1,2,3,4,3,5) %>% cumsum()
c(1,1,2,3,4,3,5) %>% cumprod()
c(1,1,2,3,4,3,5) %>% between(2,4)
c(1:5) %>% lead() - c(1:5)
c(1:5) %>% lead()
c(1:5) %>% lag() - c(1:5)
c(1:10) %>% ntile(4) # bucket edges are rounded
c(1:12) %>% ntile(4) # bucket edges are rounded
c(1:10) %>% ntile(4) # bucket edges are rounded
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% arrange(desc(ntile_z)) %>% tbl_df
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% arrange(desc(ntile_z)) %>% View
c(1,1,2,5,4,3,5) %>% cume_dist()
c(1:5) %>% cume_dist()
c(1,1:5) %>% cume_dist()
diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent <= .20 | price_percent >= .80) %>% ggplot(aes(x = price, y = carat)) + geom_point(aes(color=cut))
diamonds %>% summarize(max_price = max(price)) # Equivalent SQL:select max(price) as max_price from diamonds;
diamonds %>% summarize(mean = mean(x), sum = sum(x,y,z), n = n())
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(desc(n), cut, color)
diamonds %>% group_by(cut, color, clarity) %>% summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(n)
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
require(tidyr)
require(dplyr)
require(ggplot2)
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x), y) %>% tbl_df
diamonds %>% rename(tbl= table) %>% tbl_df # Equivalent: select tbl as "table" from diamonds;
diamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df # Equivalent: select cut, clarity, x+y+z as sum from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null
diamonds %>% group_by(cut,color) %>% summarise(n = n()) %>% arrange(n) # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n;
diamonds %>% summarize(max_price = max(price)) # Equivalent SQL:select max(price) as max_price from diamonds;
require(tidyr)
require(dplyr)
require(ggplot2)
diamonds %>% summarize(max_price = max(price)) # Equivalent SQL:select max(price) as max_price from diamonds;
diamonds %>% summarize(mean = mean(x), sum = sum(x,y,z), n = n()) # Equivalent SQL:select avg(x) as avg, sum(x)+sum(y)+sum(z) as sum, count(*) as n from diamonds;
d <- diamonds %>% group_by(cut,color) %>% summarise(n = n()) %>% arrange(n) %>% tbl_df # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n;
View(d)
diamonds %>% group_by(cut, color, clarity) %>% summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)
require("jsonlite")
require(dplyr)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
emp
require("jsonlite")
require(dplyr)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(df)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require(jsonlite)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
dept <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from dept"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
dept <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from dept"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(emp)
View(dept)
dplyr::inner_join(emp, dept, by="DEPTNO") %>% tbl_df
dplyr::left_join(emp, dept, by="DEPTNO") %>% tbl_df
dplyr::right_join(emp, dept, by="DEPTNO") %>% tbl_df
dplyr::full_join(emp, dept, by="DEPTNO") %>% tbl_df
dplyr::inner_join(emp, dept, by="DEPTNO") %>% View
dplyr::left_join(emp, dept, by="DEPTNO") %>% tbl_df
dplyr::left_join(emp, dept, by="DEPTNO") %>% View
dplyr::right_join(emp, dept, by="DEPTNO") %>% View
dplyr::full_join(emp, dept, by="DEPTNO") %>% View
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% tbl_df
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% tbl_df
oneDept <- dept %>% filter(DEPTNO == 10)
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% tbl_df
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"SELECT *
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"SELECT *
FROM emp e
WHERE EXISTS
(SELECT 1
FROM   dept d
WHERE  e.deptno = 10)
ORDER BY deptno;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE))); tbl_df(df)
dplyr::intersect(dept, oneDept) %>% tbl_df
View(oneDept)
oneDept <- dept %>% filter(DEPTNO == 10)
View(oneDept)
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% tbl_df
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% View
View(oneDept)
View(df)
View(emp)
dplyr::anti_join(emp, oneDept, by="DEPTNO") %>% tbl_df
View(df)
setwd("/Users/Fred/DV_RProject3/01 Data")
file_path <- "growth_fund_nav_return1.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df)
View(df)
setwd("/Users/Fred/DV_RProject3/01 Data")
file_path <- "growth_fund_nav_return1.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("ICDI", "Date", "TNAM", "RETM", "NAVM")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("/Users/Fred/DV_RProject3/01 Data")
file_path <- "growth_fund_nav_return1.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("ICDI", "Date", "TNAM", "RETM", "NAVM")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("/Users/Fred/DV_RProject3/01 Data")
file_path<- "fama_french_factors1.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(df) <- gsub("\\.+", "_", names(df))
setwd("/Users/Fred/DV_RProject3/01 Data")
file_path<- "fama_french_factors1.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("ICDI", "Date", "TNAM", "RETM", "NAVM")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
source('~/DV_RProject3/02 Data Wrangling/SQL TO R.R', echo=TRUE)
View(GF)
View(GF)
data1 <- GF[1]
data1 <- GF[1]
a
1+1
data1 <- GF[Date]
data1 <- GF[date_]
data1 <- GF["Date_"]
data1 <- GF(1)
data1 <- GF[1]
year(2014.10)
require("jsonlite")
GF %>% mutate(year = format(date_, %b))
require("jsonlite")
require("RCurl")
require(dplyr)
GF %>% mutate(year = format(date_, %b))
GF %>% mutate(year = format(date_, %b)) %>% tbl_GF
GF %>% mutate(year = format(date_, "%b")) %>% tbl_GF
GF %>% mutate(year = format(DATE_, "%b")) %>% tbl_GF
GF %>% mutate(year = format(DATE_, "%b"))
require("jsonlite")
GF %>% mutate(year = format(DATE_, "%b")) %>% tbl_GF
require(lubridate)
GF %>% mutate(year = year(DATE_) %>% tbl_GF
GF %>% mutate(year = year(DATE_) %>% View
GF %>% mutate(year = year(DATE_)) %>% View
GF %>% mutate(year = year(DATE_))
GF %>% mutate(year = year(DATE_))
GF %>% mutate(year = year(DATE_))
GF
1+1
View(GF)
gf
GF %>% mutate(year = year(DATE_))
GF %>% mutate(year = year(DATE_)) %>% GF
GF %>% mutate(year = year(DATE_))
date = "1993.10.10"
year(date)
year
help(year)
year("11/28/2003")
help("lubridate")
ymd("11/28/2013")
ymd("11/28/2013")
year(03)
month(08)
month(date_)
month("11/28/2013")
year(11/28/2013)
ymd(11/28/2013)
parse_date_time("11/28/2013", "%m%d%y")
temp <- parse_date_time("11/28/2013", "%m%d%y")
temp %>% mutate(year = year(temp))
year(temp)
GF %>% mutate(year = year(parse_date_time(DATE_, "%m%d%y")))
View(GF)
GF %>% mutate(year = year(parse_date_time(DATE_, "%m%d%y"))) %>% GF
GF<- GF %>% mutate(year = year(parse_date_time(DATE_, "%m%d%y")))
View(GF)
GF<- GF %>% mutate(month = month(parse_date_time(DATE_, "%m%d%y")))
View(GF)
FLJoin <- dplyr::full_join(GF, DF, by="year" and by="month") %>% tbl_df
help("full_join")
FLJoin <- dplyr::full_join(GF, DF, by=c("year","month") %>% tbl_df
1+1
1+1
FLJoin <- dplyr::full_join(GF, DF, by=c("year","month"))
FLJoin <- dplyr::full_join(GF, FF, by=c("year","month"))
FLJoin <- dplyr::full_join(GF, FF, by=c("YEAR","MONTH"))
FLJoin <- dplyr::full_join(GF, FF, by=c("YEAR" = "YEAR","MONTH" = "MONTH"))
FLJoin <- dplyr::full_join(GF, FF, by="YEAR")
View(GF)
GF<- GF %>% mutate(YEAR = year(parse_date_time(DATE_, "%m%d%y")))
GF<- GF %>% mutate(MONTH = month(parse_date_time(DATE_, "%m%d%y")))
View(GF)
FLJoin <- dplyr::full_join(GF, FF, by=c("YEAR","MONTH"))
View(FLJoin)
View(FF)
require("jsonlite")
require("RCurl")
require(dplyr)
require(lubridate)
# Change the USER and PASS below to be your UTEid
FF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from FAMA_FRENCH"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from GROWTH_FUND"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF<- GF %>% mutate(YEAR = year(parse_date_time(DATE_, "%m%d%y")))
GF<- GF %>% mutate(MONTH = month(parse_date_time(DATE_, "%m%d%y")))
FLJoin <- dplyr::full_join(GF, FF, by=c("YEAR","MONTH"))
View(df)
View(FLJoin)
